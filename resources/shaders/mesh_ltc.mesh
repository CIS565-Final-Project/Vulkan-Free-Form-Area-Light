#version 450

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct Task
{
	int task_id;
	vec3 color;
};

struct Vertex
{
	vec4 position;
	vec4 normal;
	vec4 uv;
	ivec4 materialId;
};

struct MeshletDescription
{
	uint vertexCount;
	uint primCount;
	uint vertexBegin;
	uint primBegin;
	uint modelId;
};

struct ModelMatrix
{
	mat4 model;
	mat4 invModel;
};

layout(set = 0, binding = 0) uniform CameraUBO {
	vec4 pos;
    mat4 viewProjMat;
} u_CamUBO;

layout(set = 1, binding = 0) buffer MeshletInfos {
    MeshletDescription meshlets[];
};

layout(set = 1, binding = 1) buffer ModelMatries {
    ModelMatrix modelMatrix[];
};

layout(set = 1, binding = 2) buffer VertexIndices {
   uint vertexIndices[];
};

layout(set = 1, binding = 3) buffer PrimitiveIndices {
    uint8_t primitiveIndices[];
};

layout(set = 1, std430, binding = 4) buffer Vertices {
    Vertex vertices[];
};

taskPayloadSharedEXT Task IN;

// Vertex Ouput
layout(location = 0) out PerVertexData
{
	vec2 uv;
	vec3 color;
	vec3 pos; // worldPos
	vec3 normal;
} v_out[];

float scale = 0.5f;

// hard code triangle data

const vec3 color[3] = vec3[](
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 1.0)
);

// A simple hash function
float hash(int n) {
    float a = float(n);
    return fract(sin(a) * 43758.5453);
}

// Generate a random color from an integer
vec3 randomColor(int seed) {
    // Use the hash function to generate random values for each color channel
    float r = hash(seed);
    float g = hash(seed + 1);
    float b = hash(seed + 2);

    return vec3(r, g, b);
}

void main()
{
	uint vertexCount = 3;
	uint triangleCount = 1;
	SetMeshOutputsEXT(vertexCount, triangleCount);

	MeshletDescription meshlet = meshlets[IN.task_id];

	ivec3 local_id = ivec3(
		primitiveIndices[meshlet.primBegin + 3 * gl_WorkGroupID.x],
		primitiveIndices[meshlet.primBegin + 3 * gl_WorkGroupID.x + 1],
		primitiveIndices[meshlet.primBegin + 3 * gl_WorkGroupID.x + 2] 
	);

	ivec3 real_id = ivec3(
		vertexIndices[meshlet.vertexBegin + local_id.x],
		vertexIndices[meshlet.vertexBegin + local_id.y],
		vertexIndices[meshlet.vertexBegin + local_id.z]
	);
	for(int v = 0; v < 3; ++v)
	{
		//v_out[v].pos = vertices[real_id[v]].position.xyz;
		v_out[v].pos = (modelMatrix[meshlet.modelId].model * vec4(vertices[real_id[v]].position.xyz, 1.f)).xyz;

		gl_MeshVerticesEXT[v].gl_Position = u_CamUBO.viewProjMat * vec4(v_out[v].pos, 1.f);
		v_out[v].uv = vertices[real_id[v]].uv.xy;
		v_out[v].color = IN.color;
		v_out[v].normal = (modelMatrix[meshlet.modelId].invModel * vec4(vertices[real_id[v]].normal.xyz, 0.f)).xyz;
	}
	
	gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
}