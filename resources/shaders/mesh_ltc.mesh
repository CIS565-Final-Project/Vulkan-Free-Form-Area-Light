#version 450

#extension GL_EXT_mesh_shader : require

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct Task
{
	int task_id;
	vec3 color;
};

struct TriangleInfo
{
	ivec4 pId;
    ivec4 nId;
    ivec4 uvId;
};


layout(set = 0, binding = 0) uniform CameraUBO {
    mat4 viewProjMat;
} u_CamUBO;

layout(set = 1, binding = 0) uniform MeshletInfo {
    uint Meshlet_Size;
	uint Triangle_Count;
};

layout(set = 1, binding = 1) buffer Triangles {
   TriangleInfo triangle[];
};

layout(set = 1, binding = 2) buffer Positions {
    float positions[];
};

layout(set = 1, binding = 3) buffer Normals {
    float normals[];
};

layout(set = 1, binding = 4) buffer UVs {
    float uvs[];
};

taskPayloadSharedEXT Task IN;

// Vertex Ouput
layout(location = 0) out PerVertexData
{
	vec2 uv;
	vec3 color;
	vec3 pos; // worldPos
} v_out[];

float scale = 0.5f;

// hard code triangle data

const vec3 color[3] = vec3[](
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 1.0)
);

// A simple hash function
float hash(int n) {
    float a = float(n);
    return fract(sin(a) * 43758.5453);
}

// Generate a random color from an integer
vec3 randomColor(int seed) {
    // Use the hash function to generate random values for each color channel
    float r = hash(seed);
    float g = hash(seed + 1);
    float b = hash(seed + 2);

    return vec3(r, g, b);
}

void main()
{
	uint vertexCount = 3;
	uint triangleCount = 1;
	SetMeshOutputsEXT(vertexCount, triangleCount);

	uint tri_id = IN.task_id * Meshlet_Size + gl_WorkGroupID.x;

	for(int i = 0; i < 3; ++i)
	{
		int vid = triangle[tri_id].pId[i];
		vec4 pos = vec4(
			positions[3 * vid],
			positions[3 * vid + 1],
			positions[3 * vid + 2],
			1.f
		);
		gl_MeshVerticesEXT[i].gl_Position = u_CamUBO.viewProjMat * pos;

		int uv_id = triangle[tri_id].uvId[i];
		v_out[i].uv = vec2(uvs[2 * uv_id], uvs[2 * uv_id + 1]);
		v_out[i].color = IN.color;
		v_out[i].pos = pos.xyz;
	}
	
	gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
}