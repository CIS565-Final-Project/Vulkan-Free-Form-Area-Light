#version 450

#extension GL_EXT_mesh_shader : require


layout(local_size_x = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct Task
{
	int light_id;
	int light_type;
	vec3 color;
	int division;
	vec3 center;
	vec2 centerUV;
};

struct TriangleInfo
{
	ivec4 pId;
    ivec4 nId;
    ivec4 uvId;
};


layout(set = 0, binding = 0) uniform CameraUBO {
	vec4 pos;
    mat4 viewProjMat;
} u_CamUBO;

layout(set = 1, binding = 0) uniform MeshletInfo {
    uint Meshlet_Size;
	uint Triangle_Count;
};

layout(set = 1, binding = 1) buffer Triangles {
   TriangleInfo triangle[];
};

layout(set = 1, binding = 2) buffer Positions {
    float positions[];
};

layout(set = 1, binding = 3) buffer Normals {
    float normals[];
};

layout(set = 1, binding = 4) buffer UVs {
    float uvs[];
};

taskPayloadSharedEXT Task IN;

layout(location = 0) out PerVertexData
{
	vec2 uv;
} v_out[];


// A simple hash function
float hash(int n) {
    float a = float(n);
    return fract(sin(a) * 43758.5453);
}

// Generate a random color from an integer
vec3 randomColor(int seed) {
    // Use the hash function to generate random values for each color channel
    float r = hash(seed);
    float g = hash(seed + 1);
    float b = hash(seed + 2);

    return vec3(r, g, b);
}

#define MAX_LIGHT_VERTEX 10
struct LightInfo {
	vec2 boundUV[4]; // use for texture
	vec3 boundPositions[4]; //use for texture
	vec3 lightVertex[MAX_LIGHT_VERTEX];	
	int arraySize;
	int lightType;//0: polygon 1: bezier
	vec2 padding;
};

layout(set = 2, binding = 0) uniform LightCount{
	uint lightCount;
};
layout(set = 2, binding = 1) buffer lightBuffer{
	LightInfo lightInfos[];
};


vec3 BezierCurve(const vec3 ctrlPts[4], float t){
	vec3 u01 = mix(ctrlPts[0], ctrlPts[1], t);
	vec3 u12 = mix(ctrlPts[1], ctrlPts[2], t);
	vec3 u23 = mix(ctrlPts[2], ctrlPts[3], t);
	u01 = mix(u01, u12, t);
	u12 = mix(u12, u23, t);
	return mix(u01, u12, t);
}

vec2 getInterpolatedUV(vec3 pt, const in LightInfo info){
	vec3 vPt = pt - info.boundPositions[0];
	vec3 v1 = info.boundPositions[1] - info.boundPositions[0];
	vec3 v3 = info.boundPositions[3] - info.boundPositions[0];
	float u = dot(vPt,normalize(v1))/length(v1);
	float v = dot(vPt,normalize(v3))/length(v3);
	
	vec2 uvH0 = mix(info.boundUV[0], info.boundUV[1], u);
	vec2 uvH1 = mix(info.boundUV[3], info.boundUV[2], u);
	return mix(uvH0,uvH1,v);
}

void main()
{

	uint cuvreNum = gl_WorkGroupID.y;
	uint vertexCount = 3;
	uint triangleCount = 1;

	SetMeshOutputsEXT(vertexCount, triangleCount);
	
	LightInfo lightInfo = lightInfos[IN.light_id];
	//gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);

	if(IN.light_type == 0){
		//polygon
		gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
		uint nextVert = uint(mod(cuvreNum + 1, lightInfo.arraySize));
		vec3 v0 = lightInfo.lightVertex[cuvreNum];
		//v1 = IN.center
		vec3 v2 = lightInfo.lightVertex[nextVert];
		v_out[0].uv = getInterpolatedUV(v0,lightInfo);
		// v_out[1].uv = getInterpolatedUV(IN.center,lightInfo);
		v_out[1].uv = IN.centerUV;
		v_out[2].uv = getInterpolatedUV(v2,lightInfo);
		gl_MeshVerticesEXT[0].gl_Position = u_CamUBO.viewProjMat * vec4(v0, 1.0f);
		gl_MeshVerticesEXT[1].gl_Position = u_CamUBO.viewProjMat * vec4(IN.center, 1.0f);
		gl_MeshVerticesEXT[2].gl_Position = u_CamUBO.viewProjMat * vec4(v2, 1.0f);
	}else{
		//bezier
		gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
		vec3 ctrlPts[4] = vec3[](
			lightInfo.lightVertex[cuvreNum * 4],
			lightInfo.lightVertex[cuvreNum * 4 + 1],
			lightInfo.lightVertex[cuvreNum * 4 + 2],
			lightInfo.lightVertex[cuvreNum * 4 + 3]
		);

		vec3 v0 = BezierCurve(ctrlPts,  float(gl_WorkGroupID.x) / float(IN.division));
		//v1 = IN.center
		vec3 v2 = BezierCurve(ctrlPts,  float(gl_WorkGroupID.x + 1) / float(IN.division));
		v_out[0].uv = getInterpolatedUV(v0,lightInfo);
		v_out[1].uv = IN.centerUV;
		v_out[2].uv = getInterpolatedUV(v2,lightInfo);

		gl_MeshVerticesEXT[0].gl_Position = u_CamUBO.viewProjMat * vec4(v0, 1.0f);
		gl_MeshVerticesEXT[1].gl_Position = u_CamUBO.viewProjMat * vec4(IN.center, 1.0f);
		gl_MeshVerticesEXT[2].gl_Position = u_CamUBO.viewProjMat * vec4(v2, 1.0f);
	}

}