#version 450

#extension GL_EXT_mesh_shader : require


layout(local_size_x = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct Task
{
	int task_id;
	vec3 color;
	int division;
	vec3 center;
};

struct TriangleInfo
{
	ivec4 pId;
    ivec4 nId;
    ivec4 uvId;
};


layout(set = 0, binding = 0) uniform CameraUBO {
	vec4 pos;
    mat4 viewProjMat;
} u_CamUBO;

layout(set = 1, binding = 0) uniform MeshletInfo {
    uint Meshlet_Size;
	uint Triangle_Count;
};

layout(set = 1, binding = 1) buffer Triangles {
   TriangleInfo triangle[];
};

layout(set = 1, binding = 2) buffer Positions {
    float positions[];
};

layout(set = 1, binding = 3) buffer Normals {
    float normals[];
};

layout(set = 1, binding = 4) buffer UVs {
    float uvs[];
};

taskPayloadSharedEXT Task IN;

/*
// Vertex Ouput
layout(location = 0) out PerVertexData
{
	vec2 uv;
	vec3 color;
} v_out[];
*/

float scale = 0.5f;

// hard code triangle data

const vec3 color[3] = vec3[](
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 1.0)
);

// A simple hash function
float hash(int n) {
    float a = float(n);
    return fract(sin(a) * 43758.5453);
}

// Generate a random color from an integer
vec3 randomColor(int seed) {
    // Use the hash function to generate random values for each color channel
    float r = hash(seed);
    float g = hash(seed + 1);
    float b = hash(seed + 2);

    return vec3(r, g, b);
}

const vec3 allCtrlPts[8] = vec3[](
	vec3(-1.5, -0.5f, 5.0f),
	vec3(1.5f, -0.5f, 5.0f),
	vec3(10.5f, -0.5f, 5.0f),
	vec3(1.5f, 2.5f, 5.0f),
		
		
	vec3(1.5f, 2.5f, 5.0f),
	vec3(-1.5f, 3.5f, 5.0f),
	vec3(-2.5f, 2.5f, 5.0f),
	vec3(-1.5f, -0.5f, 5.0f)
);

vec3 BezierCurve(const vec3 ctrlPts[4], float t){
	vec3 u01 = mix(ctrlPts[0], ctrlPts[1], t);
	vec3 u12 = mix(ctrlPts[1], ctrlPts[2], t);
	vec3 u23 = mix(ctrlPts[2], ctrlPts[3], t);
	u01 = mix(u01, u12, t);
	u12 = mix(u12, u23, t);
	return mix(u01, u12, t);
}

/*
-1.5f, 2.5f, 5.0f,
1.5f, 2.5f, 5.0f,
-1.5f, -0.5f, 5.0f,
1.5f, -0.5f, 5.0f

*/

#define DIVISION 8

void main()
{

	int cuvreNum = 2;
	uint vertexCount = 3;
	uint triangleCount = 1;

	SetMeshOutputsEXT(vertexCount, triangleCount);

	vec3 ctrlPts[4] = vec3[](
		allCtrlPts[IN.task_id * 4],
		allCtrlPts[IN.task_id * 4 + 1],
		allCtrlPts[IN.task_id * 4 + 2],
		allCtrlPts[IN.task_id * 4 + 3]
	);

	gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
	gl_MeshVerticesEXT[0].gl_Position = u_CamUBO.viewProjMat * vec4(BezierCurve(ctrlPts,  float(gl_WorkGroupID.x) / float(IN.division)), 1.0f);
	gl_MeshVerticesEXT[1].gl_Position = u_CamUBO.viewProjMat * vec4(IN.center, 1.0f);
	gl_MeshVerticesEXT[2].gl_Position = u_CamUBO.viewProjMat * vec4(BezierCurve(ctrlPts,  float(gl_WorkGroupID.x + 1) / float(IN.division)), 1.0f);

	/*
	for(int i = 0; i < DIVISION; i++)
	{
		vec3 pos = BezierCurve(ctrlPts, i * (1.0f / DIVISION));
		gl_MeshVerticesEXT[i + 1].gl_Position = u_CamUBO.viewProjMat * vec4(pos, 1.0f);

		gl_PrimitiveTriangleIndicesEXT[i] =  uvec3(i + 1, i + 2, 0);
	}

	gl_MeshVerticesEXT[DIVISION + 1].gl_Position = u_CamUBO.viewProjMat * vec4(ctrlPts[3], 1.0f);
	*/

	/*
	uint vertexCount = 3;
	uint triangleCount = 1;
	SetMeshOutputsEXT(vertexCount, triangleCount);

	uint tri_id = IN.task_id * Meshlet_Size + gl_WorkGroupID.x;

	for(int i = 0; i < 3; ++i)
	{
		int vid = triangle[tri_id].pId[i];
		// vec4 pos = vec4(positions[3 * vid],positions[3 * vid + 1],positions[3 * vid + 2],1.f);

		vec4 pos = vec4(allCtrlPts[i], 1.f);

		gl_MeshVerticesEXT[i].gl_Position = u_CamUBO.viewProjMat * pos;

		// int uv_id = triangle[tri_id].uvId[i];
		// v_out[i].uv = vec2(uvs[2 * uv_id], uvs[2 * uv_id + 1]);
		v_out[i].uv = vec2(0.5f, 0.5f);
		v_out[i].color = IN.color;
	}
	gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 1, 2);
	*/
}