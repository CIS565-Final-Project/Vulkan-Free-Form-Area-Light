#version 450

#extension GL_EXT_mesh_shader : require

struct Task
{
	int light_id;
	int light_type;
	vec3 color;
	int division;
	vec3 center;
	vec2 centerUV;
};

taskPayloadSharedEXT Task OUT;

// A simple hash function
float hash(int n) {
    float a = float(n);
    return fract(sin(a) * 43758.5453);
}

// Generate a random color from an integer
vec3 randomColor(int seed) {
    // Use the hash function to generate random values for each color channel
    float r = hash(seed);
    float g = hash(seed + 1);
    float b = hash(seed + 2);

    return vec3(r, g, b);
}

#define CURVE_NUM 2
#define DIVISION 50

#define MAX_LIGHT_VERTEX 10
struct LightInfo {
	vec2 boundUV[4]; // use for texture
	vec3 boundPositions[4]; //use for texture
	vec4 boundSphere;
	vec3 lightVertex[MAX_LIGHT_VERTEX];	
	int arraySize;
	int lightType;//0: polygon 1: bezier
	float amplitude;
	float padding;
};

layout(set = 1, binding = 0) uniform LightCount{
	uint lightCount;
};
layout(set = 1, binding = 1) buffer lightBuffer{
	LightInfo lightInfos[];
};

vec2 getInterpolatedUV(vec3 pt, const in LightInfo info){
	//barycentric interpolation
	//https://cgvr.informatik.uni-bremen.de/teaching/cg_literatur/barycentric_floater.pdf
	float lenPv0 = length(info.boundPositions[0] - pt);
	float lenPv1 = length(info.boundPositions[1] - pt);
	float lenPv2 = length(info.boundPositions[2] - pt);
	float lenPv3 = length(info.boundPositions[3] - pt);
	float tan0 = tan(acos(dot(info.boundPositions[0] - pt, info.boundPositions[1] - pt)/(lenPv0 * lenPv1))*0.5);
	float tan1 = tan(acos(dot(info.boundPositions[1] - pt, info.boundPositions[2] - pt)/(lenPv1 * lenPv2))*0.5);
	float tan2 = tan(acos(dot(info.boundPositions[2] - pt, info.boundPositions[3] - pt)/(lenPv2 * lenPv3))*0.5);
	float tan3 = tan(acos(dot(info.boundPositions[3] - pt, info.boundPositions[0] - pt)/(lenPv3 * lenPv0))*0.5);
	vec4 barycentric = vec4(
		(tan3 + tan0)/lenPv0,
		(tan0 + tan1)/lenPv1,
		(tan1 + tan2)/lenPv2,
		(tan2 + tan3)/lenPv3
	);
	barycentric /= (barycentric.x + barycentric.y + barycentric.z + barycentric.w);
	return info.boundUV[0] * barycentric.x + info.boundUV[1] * barycentric.y + info.boundUV[2] * barycentric.z + info.boundUV[3] * barycentric.w;
}

void main()
{
	if(gl_WorkGroupID.x < lightCount){
		vec3 center = vec3(0.f);
		uint boundaryCnt = 0;
		LightInfo lightInfo = lightInfos[gl_WorkGroupID.x];

		if(lightInfo.lightType == 0){
			//polygon
			for(int j = 0;j<lightInfo.arraySize;++j){
				center += lightInfo.lightVertex[j];
			}
			boundaryCnt = lightInfo.arraySize;
			OUT.light_type = 0;
			OUT.division = 1;
		}else{
			//bezier
			for(int j = 0;j<lightInfo.arraySize;j+=4){
				vec3 u01 = mix(lightInfo.lightVertex[j], lightInfo.lightVertex[j + 1], 0.5f);
				vec3 u12 = mix(lightInfo.lightVertex[j + 1], lightInfo.lightVertex[j + 2], 0.5f);
				vec3 u23 = mix(lightInfo.lightVertex[j + 2], lightInfo.lightVertex[j + 3], 0.5f);
				center += mix(mix(u01, u12, 0.5f), mix(u12, u23, 0.5f), 0.5f);
			}
			boundaryCnt = lightInfo.arraySize/4;
			OUT.light_type = 1;
			OUT.division = DIVISION;
		}
		center /= boundaryCnt;
		
		OUT.centerUV = getInterpolatedUV(center,lightInfo);
		OUT.light_id = int(gl_WorkGroupID.x);
		OUT.color = randomColor(OUT.light_id);
		OUT.center = center;

		EmitMeshTasksEXT(OUT.division, boundaryCnt, 1);// use gl_WorkGroupID to index in mesh shader
	}
}
