#version 450

#extension GL_EXT_mesh_shader : require

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct Task
{
	int task_id;
	vec3 color;
};

layout(set = 0, binding = 0) uniform CameraUBO {
    mat4 viewProjMat;
} u_CamUBO;

layout(set = 1, binding = 0) buffer Vertices {
    vec4 vertices[];
};

taskPayloadSharedEXT Task IN;

// Vertex Ouput
layout(location = 0) out PerVertexData
{
	vec3 color;
} v_out[];

float scale = 0.5f;

// hard code triangle data
const vec3 position[2][3] = vec3[][](
	vec3[](
		vec3( 1., -1., 0),
		vec3( 1.,  1., 0),
		vec3(-1., -1., 0)
	), 
	vec3[](
		vec3(-1., -1., 0),
		vec3( 1.,  1., 0),
		vec3(-1.,  1., 0)
	)
);

const vec3 color[3] = vec3[](
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 1.0)
);

void main()
{
	uint vertexCount = 3;
	uint triangleCount = 1;
	SetMeshOutputsEXT(vertexCount, triangleCount);

	for(int i = 0; i < 3; ++i)
	{
		gl_MeshVerticesEXT[i].gl_Position = u_CamUBO.viewProjMat * vertices[IN.task_id * 3 + i];
		v_out[i].color = IN.color;//color[i];
	}
	gl_PrimitiveTriangleIndicesEXT[0] =  uvec3(0, 2, 1);
}